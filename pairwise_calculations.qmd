---
title: "pairwise_calculations"
format:
  html:
    theme: default
---

In this document, I'm going to do some pairwise utility calculations for the version I know is bad for minority groups (the synthesis from people above the poverty line, for people below the poverty line).

I'm going to do these by calculating the AUC and pMSE for pairs of variables only, where the variables can be categorical or numeric. I'll then make a table, similar to the Raab paper (https://arxiv.org/pdf/2109.12717.pdf).

```{r, echo = F}
library(tidyverse)
library(ipumsr)
library(srvyr)
library(parsnip)
library("data.table")
library(recipes)
library(devtools)

load_all('../tidysynthesis')
library(tidysynthesis)
load_all('../syntheval')
library(syntheval)
library(dials)
library(tune)
library(gtools)
library(MASS)
library(caret)
library(gt)
library(ggpubr)

set.seed(1)
```

Getting the input data
```{r}
# pull dataset
data <- read_ipums_micro("data/usa_00004.xml")
data <- data |>
  mutate(across(where(is.labelled), ~as_factor(lbl_clean(.x))))

states <- c("Michigan")
vars <- c("STATEFIP", "PERNUM", "SEX", "AGE", "RACE", 
           "HCOVANY", "EDUC", "EMPSTAT", "FTOTINC", "POVERTY",
           "VETSTAT")

data_mi <- data %>%
  dplyr::select(all_of(vars)) %>%
  filter(STATEFIP %in% states,
         PERNUM == 1) 

# recode factor variables (vetstat, sex, race, healthcare coverage, employment status didn't need recoding)
data_mi$EDUC <- recode(data_mi$EDUC, 
               "N/A or no schooling" = "N/A",
               "Nursery school to grade 4" = "Less than high school",
               "Grade 5, 6, 7, or 8" = "Less than high school",
               "Grade 9" = "Some high school",
               "Grade 10" = "Some high school",
               "Grade 11" = "Some high school",
               "Grade 12" = "High school",
               "1 year of college" = "Some college",
               "2 years of college" = "Some college",
               "4 years of college" = "4+ years of college",
               "5+ years of college" = "4+ years of college")

# recode numeric variables (age, poverty (as % of poverty threshold), and income)
data_mi$AGE <- as.numeric(as.character(recode(data_mi$AGE, 
                      "Less than 1 year old"= "0",
                      "90 (90+ in 1980 and 1990)" = "90")))
data_mi$FTOTINC <- as.numeric(as.character(recode(data_mi$FTOTINC,
                                     "No income (1950-2000, ACS/PRCS) " = "0")))
data_mi$POVERTY <- as.numeric(as.character(recode(data_mi$POVERTY,
                                     "501 percent or more of poverty threshold" = "500",
                                     "1 percent or less of poverty threshold (including 0 or negative income)" = "0")))

# set character NAs to be NA
data_mi[data_mi == "N/A"]<-NA 

# create poverty indicator
data_mi$pov <- ifelse(data_mi$POVERTY < 100, 1, 0)

# complete case analysis of adults only
data_mi <- data_mi %>%
  filter(AGE >= 19,
         complete.cases(.)) %>%
  dplyr::select(-c("STATEFIP", "PERNUM", "POVERTY"))

# get rid of unused NA levels in factors (educ, empstat, vetstat)
data_mi = droplevels(data_mi)
```

Making the synthetic dataset from only the majority group, permuting in the minority group
```{r}
# function that takes start data and confidential data, and synthesizes dataset
synth_pov <- function(start_data, conf_data){
  # synthesize categorical first, then continuous
  visit_sequence = visit_sequence(c("SEX", "VETSTAT", "EMPSTAT", "EDUC", "HCOVANY", "RACE", "FTOTINC", "AGE"), start_data, type = "manual")
  roadmap = roadmap(conf_data, start_data, visit_sequence)
  recipe = construct_recipes(roadmap = roadmap)
  
  tree_cl <- parsnip::decision_tree(cost_complexity = .0001) %>%
    set_mode(mode = "classification") %>%
    set_engine(engine = "rpart")
  tree_reg <- parsnip::decision_tree(cost_complexity = .0001) %>%
    set_mode(mode = "regression") %>%
    set_engine(engine = "rpart")
  
  synth_spec = synth_spec(roadmap,
                          synth_algorithms = list(tree_cl, tree_cl, tree_cl, tree_cl, tree_cl, tree_cl, tree_reg, tree_reg),
                          recipe,
                          predict_methods = sample_rpart)
  
  # noise
  noise <- noise(roadmap = roadmap,
                 add_noise = FALSE,
                 exclusions = 0)
  
  # constraints
  constraints <- constraints(roadmap = roadmap,
                             constraints = NULL,
                             max_z = 0)
  
  replicates <- replicates(replicates = 1,
                           workers = 1,
                           summary_function = NULL)
  
  # create a presynth object
  presynth1 <- presynth(
    roadmap = roadmap,
    synth_spec = synth_spec,
    noise = noise, 
    constraints = constraints,
    replicates = replicates
  )
  synthesized = synthesize(presynth1, progress = TRUE)
  synthesized
}
```

```{r}
# synthesize from only people not in poverty
start_data = data_mi[,"pov"]
start_data$pov = rep(0, nrow(data_mi))
conf_data = data_mi %>%
  filter(pov == 0)
synthesized <- synth_pov(start_data, conf_data)
```

Getting pairs of variables (only need each pair once)

For each pair, create a model that uses only those two variables, calculate the discriminant-based metrics, and record the AUC and pMSE from a tree model (not the random forest model).
```{r}
calc_metrics <- function(discriminator){
  # Evaluate discriminant-based metrics on the data using tree-based model
  tree_mod <- decision_tree(cost_complexity = tune()) %>%
    set_mode(mode = "classification") %>%
    set_engine(engine = "rpart")
  
  rpart_rec <- recipe(.source_label ~ ., data = discriminator$combined_data)
  
  grid = grid_regular(cost_complexity(), levels= 10)
  
  # set up discriminator
  d <- discriminator %>%
    add_propensities_tuned(
      grid = grid, 
      recipe = rpart_rec,
      spec = tree_mod
    ) %>%
    add_discriminator_auc() %>%
    add_specks() %>%
    add_pmse()
  res = c(d$discriminator_auc, d$pmse, d$specks)
  return(c(res$.estimate[2], res$.pmse[2], res$.specks[2]))
}
```

```{r}
# reorder columns
data_mi = data_mi %>%
  dplyr::select(c(pov, SEX, VETSTAT, EMPSTAT, EDUC, HCOVANY, RACE, FTOTINC, AGE))
```

```{r}
auc_mat <- matrix(0, ncol(data_mi), ncol(data_mi))
pmse_mat <- matrix(0, ncol(data_mi), ncol(data_mi))
specks_mat <- matrix(0, ncol(data_mi), ncol(data_mi))
```

```{r}
n = ncol(data_mi)
for (i in 1:(n-1)){
  for (j in (i+1):n){
    pair_synthesized = synthesized$synthetic_data[,c(i,j)]
    pair_conf = data_mi[,c(i,j)]
    disc = discrimination(pair_synthesized, pair_conf)
    res = calc_metrics(disc)
    auc_mat[i,j] = res[1]
    pmse_mat[i,j] = res[2]
    specks_mat[i,j] = res[3]
  }
}
```

Plotting the matrices as heatmaps
```{r}
new_auc_mat = auc_mat
new_auc_mat[new_auc_mat == 0] <- NA
rownames(new_auc_mat) <- c("pov", "SEX", "VETSTAT", "EMPSTAT", "EDUC", "HCOVANY", "RACE", "FTOTINC", "AGE")
colnames(new_auc_mat) <- c("pov", "SEX", "VETSTAT", "EMPSTAT", "EDUC", "HCOVANY", "RACE", "FTOTINC", "AGE")
new_auc_mat = reshape2::melt(new_auc_mat)
ggplot(new_auc_mat, aes(Var1, Var2, fill = value))+
  geom_tile()+
  theme_classic()

new_pmse_mat = pmse_mat
new_pmse_mat[new_pmse_mat == 0] <- NA
rownames(new_pmse_mat) <- c("pov", "SEX", "VETSTAT", "EMPSTAT", "EDUC", "HCOVANY", "RACE", "FTOTINC", "AGE")
colnames(new_pmse_mat) <- c("pov", "SEX", "VETSTAT", "EMPSTAT", "EDUC", "HCOVANY", "RACE", "FTOTINC", "AGE")
new_pmse_mat = reshape2::melt(new_pmse_mat)
ggplot(new_pmse_mat, aes(Var1, Var2, fill = value))+
  geom_tile()+
  theme_classic()

new_specks_mat = specks_mat
new_specks_mat[new_specks_mat == 0] <- NA
rownames(new_specks_mat) <- c("pov", "SEX", "VETSTAT", "EMPSTAT", "EDUC", "HCOVANY", "RACE", "FTOTINC", "AGE")
colnames(new_specks_mat) <- c("pov", "SEX", "VETSTAT", "EMPSTAT", "EDUC", "HCOVANY", "RACE", "FTOTINC", "AGE")
new_specks_mat = reshape2::melt(new_specks_mat)
ggplot(new_specks_mat, aes(Var1, Var2, fill = value))+
  geom_tile()+
  theme_classic()
```

Running this same analysis for the synthesis on the whole dataset (reordered), which should be less bad for poverty
```{r}
# synthesize from all people
start_data = data_mi[,"pov"]
conf_data = data_mi

# synthesize categorical first, then continuous
visit_sequence = visit_sequence(c("FTOTINC", "EMPSTAT", "EDUC", "RACE", "SEX", "HCOVANY", "VETSTAT", "AGE"), start_data, type = "manual")
roadmap = roadmap(conf_data, start_data, visit_sequence)
recipe = construct_recipes(roadmap = roadmap)

tree_cl <- parsnip::decision_tree(cost_complexity = .0001) %>%
  set_mode(mode = "classification") %>%
  set_engine(engine = "rpart")
tree_reg <- parsnip::decision_tree(cost_complexity = .0001) %>%
  set_mode(mode = "regression") %>%
  set_engine(engine = "rpart")

synth_spec = synth_spec(roadmap,
                        synth_algorithms = list(tree_reg, tree_cl, tree_cl, tree_cl, tree_cl, tree_cl, tree_cl, tree_reg),
                        recipe,
                        predict_methods = sample_rpart)

# noise
noise <- noise(roadmap = roadmap,
               add_noise = FALSE,
               exclusions = 0)

# constraints
constraints <- constraints(roadmap = roadmap,
                           constraints = NULL,
                           max_z = 0)

replicates <- replicates(replicates = 1,
                         workers = 1,
                         summary_function = NULL)

# create a presynth object
presynth1 <- presynth(
  roadmap = roadmap,
  synth_spec = synth_spec,
  noise = noise, 
  constraints = constraints,
  replicates = replicates
)
synthesized_v2 = synthesize(presynth1, progress = TRUE)
```

```{r}
# reorder columns
data_mi = data_mi %>%
  dplyr::select(c(pov, FTOTINC, EMPSTAT, EDUC, RACE, SEX, HCOVANY, VETSTAT, AGE))
```

```{r}
auc_mat_v2 <- matrix(0, ncol(data_mi), ncol(data_mi))
pmse_mat_v2 <- matrix(0, ncol(data_mi), ncol(data_mi))
specks_mat_v2 <- matrix(0, ncol(data_mi), ncol(data_mi))
```

```{r}
n = ncol(data_mi)
for (i in 1:(n-1)){
  for (j in (i+1):n){
    pair_synthesized = synthesized_v2$synthetic_data[,c(i,j)]
    pair_conf = data_mi[,c(i,j)]
    disc = discrimination(pair_synthesized, pair_conf)
    res = calc_metrics(disc)
    auc_mat_v2[i,j] = res[1]
    pmse_mat_v2[i,j] = res[2]
    specks_mat_v2[i,j] = res[3]
  }
}
```

Plotting the matrices as heatmaps
```{r}
new_auc_mat = auc_mat_v2
new_auc_mat[new_auc_mat == 0] <- NA
rownames(new_auc_mat) <- c("pov", "SEX", "VETSTAT", "EMPSTAT", "EDUC", "HCOVANY", "RACE", "FTOTINC", "AGE")
colnames(new_auc_mat) <- c("pov", "SEX", "VETSTAT", "EMPSTAT", "EDUC", "HCOVANY", "RACE", "FTOTINC", "AGE")
new_auc_mat = reshape2::melt(new_auc_mat)
ggplot(new_auc_mat, aes(Var1, Var2, fill = value))+
  geom_tile()+
  theme_classic()

new_pmse_mat = pmse_mat_v2
new_pmse_mat[new_pmse_mat == 0] <- NA
rownames(new_pmse_mat) <- c("pov", "SEX", "VETSTAT", "EMPSTAT", "EDUC", "HCOVANY", "RACE", "FTOTINC", "AGE")
colnames(new_pmse_mat) <- c("pov", "SEX", "VETSTAT", "EMPSTAT", "EDUC", "HCOVANY", "RACE", "FTOTINC", "AGE")
new_pmse_mat = reshape2::melt(new_pmse_mat)
ggplot(new_pmse_mat, aes(Var1, Var2, fill = value))+
  geom_tile()+
  theme_classic()

new_specks_mat = specks_mat_v2
new_specks_mat[new_specks_mat == 0] <- NA
rownames(new_specks_mat) <- c("pov", "SEX", "VETSTAT", "EMPSTAT", "EDUC", "HCOVANY", "RACE", "FTOTINC", "AGE")
colnames(new_specks_mat) <- c("pov", "SEX", "VETSTAT", "EMPSTAT", "EDUC", "HCOVANY", "RACE", "FTOTINC", "AGE")
new_specks_mat = reshape2::melt(new_specks_mat)
ggplot(new_specks_mat, aes(Var1, Var2, fill = value))+
  geom_tile()+
  theme_classic()
```








