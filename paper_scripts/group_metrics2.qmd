---
title: "group_metrics2"
format: pdf
---

---
title: "group_metrics"
format:
  html:
    theme: default
---

One model adn two model approach for poverty

```{r}
library(tidyverse)
library(ipumsr)
library(srvyr)
library(tidysynthesis)
library(parsnip)
library("data.table")
library(recipes)
library(devtools)
load_all("../../syntheval")
library(dials)
library(tune)
library(gtools)
library(MASS)
library(caret)
library(gt)
library(ggpubr)
source("../add_pmse_group.R")
source("../permutation_sig.R")
set.seed(78483)
```


Load in data
```{r}
process_data <- function(df){
  df <- as.data.frame(unclass(df),stringsAsFactors=TRUE)
  df$pov <- as.factor(df$pov)
  df$BLACK <- as.factor(df$BLACK)
  order = c("pov", "EMPSTAT", "EDUC", "BLACK", "SEX", "HCOVANY", "VETSTAT", "FTOTINC", "AGE")
  df <- df %>%
    dplyr::select(order)
  df
}
```

```{r}
# function that takes start data and confidential data, and synthesizes dataset
synth <- function(start_data, conf_data, var_order){
  # synthesize categorical first, then continuous
  visit_sequence = visit_sequence(var_order, start_data, type = "manual")
  roadmap = roadmap(conf_data, start_data, visit_sequence)
  recipe = construct_recipes(roadmap = roadmap)
  
  tree_cl <- parsnip::decision_tree(cost_complexity = .0001) %>%
    set_mode(mode = "classification") %>%
    set_engine(engine = "rpart")
  tree_reg <- parsnip::decision_tree(cost_complexity = .0001) %>%
    set_mode(mode = "regression") %>%
    set_engine(engine = "rpart")
  
  synth_algorithms = list()
  for (i in 1:length(var_order)){
    if(class(conf_data[,var_order[i]]) == "factor"){
      synth_algorithms[[i]] = tree_cl
    } else{
      synth_algorithms[[i]] = tree_reg
    }
  }
  
  synth_spec = synth_spec(roadmap,
                          synth_algorithms = synth_algorithms,
                          recipe,
                          predict_methods = sample_rpart)
  
  # noise
  noise <- noise(roadmap = roadmap,
                 add_noise = FALSE,
                 exclusions = 0)
  
  # constraints
  constraints <- constraints(roadmap = roadmap,
                             constraints = NULL,
                             max_z = 0)
  
  replicates <- replicates(replicates = 1,
                           workers = 1,
                           summary_function = NULL)
  
  # create a presynth object
  presynth1 <- presynth(
    roadmap = roadmap,
    synth_spec = synth_spec,
    noise = noise, 
    constraints = constraints,
    replicates = replicates
  )
  synthesized = synthesize(presynth1, progress = TRUE)
  synthesized
}
```

```{r}
permute_entries <- function(dt, k) {
  n <- nrow(dt)
  permuted_dt <- dt
  num_entries_to_permute <- round(n * k)
  
  for (col in names(dt)) {
    indices <- sample(1:n, num_entries_to_permute, replace = FALSE)
    indices_perm <- permute(indices)
    permuted_dt[indices_perm,col] <- permuted_dt[indices, col]
  }
  
  return(permuted_dt)
}
```

```{r}
make_all_synth_datasets <- function(data_mi){
  # variable ordering: 
  dmy <- dummyVars(" ~ .", data = data_mi)
  trsf <- data.frame(predict(dmy, newdata = data_mi))
  cor <- data.frame(cor(trsf))
  rownames(cor)[order(abs(cor$pov.1), decreasing = TRUE)]
  
  # based on this (select variables most highly correlated with pov first), and doing categorical variables first, order is:
  order = c("EMPSTAT", "EDUC", "BLACK", "SEX", "HCOVANY", "VETSTAT", "FTOTINC", "AGE")

  ########## synthesize (poverty, from all input data) ##########
  conf_data = data_mi
  start_data = data.frame("pov" = data_mi[,"pov"])
  synth_pov_good <- synth(start_data, conf_data, order)
  
  ######### synthesize (poverty, permute 50% of the entries in each column of poverty) ##########
  pov_conf <- data_mi %>%
    filter(pov == 1)
  # permute 50%
  sample_pov_conf <- permute_entries(pov_conf, 0.25)
  nopov_conf = data_mi %>%
    filter(pov == 0)
  conf_data <- rbind(sample_pov_conf, nopov_conf)
  start_data = data.frame("pov" = as.factor(c(rep(0, nrow(nopov_conf)), 
                                              rep(1, nrow(data_mi)-nrow(nopov_conf)))))
  synth_pov_med <- synth(start_data, conf_data, order)
  
  ######### synthesize (poverty, permute 100% of the entries in each column of poverty) ##########
  pov_conf <- data_mi %>%
    filter(pov == 1)
  # permute 50%
  sample_pov_conf <- permute_entries(pov_conf, .75)
  nopov_conf = data_mi %>%
    filter(pov == 0)
  conf_data <- rbind(sample_pov_conf, nopov_conf)
  start_data = data.frame("pov" = as.factor(c(rep(0, nrow(nopov_conf)), 
                                              rep(1, nrow(data_mi)-nrow(nopov_conf)))))
  synth_pov_bad <- synth(start_data, conf_data, order)
  
  ######### synthesize (poverty, permute 50% of the entries in each column of poverty) ##########
  pov_conf <- data_mi %>%
    filter(pov == 1)
  # permute 50%
  nopov_conf = data_mi %>%
    filter(pov == 0)
  sample_nopov_conf <- permute_entries(nopov_conf, 0.25)
  conf_data <- rbind(sample_nopov_conf, pov_conf)
  start_data = data.frame("pov" = as.factor(c(rep(0, nrow(nopov_conf)), 
                                              rep(1, nrow(data_mi)-nrow(nopov_conf)))))
  synth_nopov_med <- synth(start_data, conf_data, order)
  
  ######### synthesize (poverty, permute 100% of the entries in each column of no poverty) ##########
  pov_conf <- data_mi %>%
    filter(pov == 1)
  # permute 50%
  nopov_conf = data_mi %>%
    filter(pov == 0)
  sample_nopov_conf <- permute_entries(nopov_conf, .75)
  conf_data <- rbind(sample_nopov_conf, pov_conf)
  start_data = data.frame("pov" = as.factor(c(rep(0, nrow(nopov_conf)), 
                                              rep(1, nrow(data_mi)-nrow(nopov_conf)))))
  synth_nopov_bad <- synth(start_data, conf_data, order)

  return(list(synth_pov_good, synth_pov_med, synth_pov_bad, synth_nopov_med, synth_nopov_bad))
}
```


```{r}
calc_disc <- function(discriminator){
  # Evaluate discriminant-based metrics on the data using tree-based model
  tree_mod <- decision_tree(cost_complexity = tune()) %>%
    set_mode(mode = "classification") %>%
    set_engine(engine = "rpart")
  
  rpart_rec <- recipe(.source_label ~ ., data = discriminator$combined_data)
  
  grid = grid_regular(cost_complexity(), levels= 10)
  
  # set up discriminator
  d <- discriminator %>%
    add_propensities_tuned(
      grid = grid, 
      recipe = rpart_rec,
      spec = tree_mod
    )
  d
}
```

Going to try two-model approach now instead to see if that improves things
```{r}
fit_two_model <- function(synth, conf, calc_disc, synth_type){
  # pov disc
  synth_pov = synth[synth$pov == 1,]
  conf_pov = conf[conf$pov == 1,]
  disc = discrimination(synth_pov, conf_pov)
  res = calc_disc(disc)
  
  res <- res %>%
    add_discriminator_auc() %>%
    add_specks()
  
  auc_pov = res$discriminator_auc$.estimate[2]
  specks_pov = res$specks$.specks[2]
  
  # no pov disc
  synth_nopov = synth[synth$pov == 0,]
  conf_nopov = conf[conf$pov == 0,]
  disc = discrimination(synth_nopov, conf_nopov)
  res = calc_disc(disc)
  
  res <- res %>%
    add_discriminator_auc() %>%
    add_specks()
  
  auc_nopov = res$discriminator_auc$.estimate[2]
  specks_nopov = res$specks$.specks[2]
  
  return(data.frame(aucs = c(auc_pov, auc_nopov), 
             speckss = c(specks_pov, specks_nopov), 
             synth_type = rep(synth_type, 2),
             pov_class = c("pov", "nopov")))
  
}
```

Given a discriminator, get every number of interest (one and two model approaches)
```{r}
get_nums <- function(synth, data_mi, calc_disc, synth_type){
  disc = discrimination(synth, data_mi)
  res = calc_disc(disc)
  res <- res %>%
    add_discriminator_auc(group = c("pov")) %>%
    add_specks(group = c("pov"))
  auc <- res$discriminator_auc$.estimate[3:4]
  specks <- res$specks$.specks[3:4]
  one_model_df <- data.frame(aucs = auc, 
                             speckss = specks, 
                             synth_type = rep(synth_type, 2),
                             pov_class = c("nopov", "pov"))
    
  two_model_df <- fit_two_model(synth, data_mi, calc_disc, synth_type)
  
  return(list(one_model_df, two_model_df))
}
```

```{r}
# load data
data_mi <- read_csv("../data/data_mi.csv")
data_mi <- as.data.frame(unclass(data_mi),stringsAsFactors=TRUE)
data_mi$pov <- as.factor(data_mi$pov)
data_mi$BLACK <- as.factor(data_mi$BLACK)
times = 5

one_model_df <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(one_model_df) <- c("aucs", "speckss", "synth_type", "pov_class")

two_model_df <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(two_model_df) <- c("aucs", "speckss", "synth_type", "pov_class")

for (time in 1:times){
  synth_list = make_all_synth_datasets(data_mi)
  synth_pov_good = synth_list[[1]]$synthetic_data
  synth_pov_good <- process_data(synth_pov_good)
  list_dfs <- get_nums(synth_pov_good, data_mi, calc_disc, "good")
  one_model_df <- rbind(one_model_df, list_dfs[[1]])
  two_model_df <- rbind(two_model_df, list_dfs[[2]])
  
  synth_pov_med = synth_list[[2]]$synthetic_data
  synth_pov_med <- process_data(synth_pov_med)
  list_dfs <- get_nums(synth_pov_med, data_mi, calc_disc, "pov_med")
  one_model_df <- rbind(one_model_df, list_dfs[[1]])
  two_model_df <- rbind(two_model_df, list_dfs[[2]])
  
  synth_pov_bad = synth_list[[3]]$synthetic_data
  synth_pov_bad <- process_data(synth_pov_bad)
  list_dfs <- get_nums(synth_pov_bad, data_mi, calc_disc, "pov_bad")
  one_model_df <- rbind(one_model_df, list_dfs[[1]])
  two_model_df <- rbind(two_model_df, list_dfs[[2]])
  
  synth_nopov_med = synth_list[[4]]$synthetic_data
  synth_nopov_med <- process_data(synth_nopov_med)
  list_dfs <- get_nums(synth_nopov_med, data_mi, calc_disc, "nopov_med")
  one_model_df <- rbind(one_model_df, list_dfs[[1]])
  two_model_df <- rbind(two_model_df, list_dfs[[2]])
  
  synth_nopov_bad = synth_list[[5]]$synthetic_data
  synth_nopov_bad <- process_data(synth_nopov_bad)
  list_dfs <- get_nums(synth_nopov_bad, data_mi, calc_disc, "nopov_bad")
  one_model_df <- rbind(one_model_df, list_dfs[[1]])
  two_model_df <- rbind(two_model_df, list_dfs[[2]])
}
```

Save dataframes
```{r}
write.csv(one_model_df, "one_model_df_pov.csv")
write.csv(two_model_df, "two_model_df_pov.csv")
```
