---
title: "pmse_ratio_black"
format:
  html:
    theme: default
---


This script will implement the two-model approach for the pMSE ratio discriminant-based metric.
For each element of the denominator of the pMSE ratio for the larger group, it will take a sample of size n (where n is the size of the smaller group) and then bootstrap this sample, taking a different initial sample each time. This will (according to the proof) create something with the same expected value under the null distribution as the minority group, allowing me to compare the 2-model approach's pMSE ratios.

I will code up the pMSE ratio function by group once I've gotten this version to work. For now, I'm doing it in a bit of a weird way.

```{r}
library(tidyverse)
library(ipumsr)
library(srvyr)
library(tidysynthesis)
library(parsnip)
library("data.table")
library(recipes)
library(devtools)
load_all("../../syntheval")
#library(syntheval)
library(dials)
library(tune)
library(gtools)
library(MASS)
library(caret)
library(gt)
library(ggpubr)
# source("../add_pmse_group.R")
source("../add_pmse_ratio_size.R")
#source("../add_pmse_group.R")
#source("../add_pmse_ratio_group.R")
# source("../add_discriminator_auc_group.R")
# source("../add_specks_group.R")
set.seed(78483)
```

Load in data
```{r}
process_data <- function(df){
  df <- as.data.frame(unclass(df),stringsAsFactors=TRUE)
  df$pov <- as.factor(df$pov)
  df$BLACK <- as.factor(df$BLACK)
  order = c("BLACK", "pov", "SEX", "EMPSTAT", "EDUC", "HCOVANY", "VETSTAT", "FTOTINC", "AGE")
  df <- df %>%
    dplyr::select(order)
  df
}
```

```{r}
# function that takes start data and confidential data, and synthesizes dataset
synth <- function(start_data, conf_data, var_order){
  # synthesize categorical first, then continuous
  visit_sequence = visit_sequence(var_order, start_data, type = "manual")
  roadmap = roadmap(conf_data, start_data, visit_sequence)
  recipe = construct_recipes(roadmap = roadmap)
  
  tree_cl <- parsnip::decision_tree(cost_complexity = .0001) %>%
    set_mode(mode = "classification") %>%
    set_engine(engine = "rpart")
  tree_reg <- parsnip::decision_tree(cost_complexity = .0001) %>%
    set_mode(mode = "regression") %>%
    set_engine(engine = "rpart")
  
  synth_algorithms = list()
  for (i in 1:length(var_order)){
    if(class(conf_data[,var_order[i]]) == "factor"){
      synth_algorithms[[i]] = tree_cl
    } else{
      synth_algorithms[[i]] = tree_reg
    }
  }
  
  synth_spec = synth_spec(roadmap,
                          synth_algorithms = synth_algorithms,
                          recipe,
                          predict_methods = sample_rpart)
  
  # noise
  noise <- noise(roadmap = roadmap,
                 add_noise = FALSE,
                 exclusions = 0)
  
  # constraints
  constraints <- constraints(roadmap = roadmap,
                             constraints = NULL,
                             max_z = 0)
  
  replicates <- replicates(replicates = 1,
                           workers = 1,
                           summary_function = NULL)
  
  # create a presynth object
  presynth1 <- presynth(
    roadmap = roadmap,
    synth_spec = synth_spec,
    noise = noise, 
    constraints = constraints,
    replicates = replicates
  )
  synthesized = synthesize(presynth1, progress = TRUE)
  synthesized
}
```

```{r}
permute_entries <- function(dt, k) {
  n <- nrow(dt)
  permuted_dt <- dt
  num_entries_to_permute <- round(n * k)
  
  for (col in names(dt)) {
    indices <- sample(1:n, num_entries_to_permute, replace = FALSE)
    indices_perm <- permute(indices)
    permuted_dt[indices_perm,col] <- permuted_dt[indices, col]
  }
  
  return(permuted_dt)
}
```

```{r}
make_all_synth_datasets <- function(data_mi){
  order = c("pov", "SEX", "EMPSTAT", "EDUC", "HCOVANY", "VETSTAT", "FTOTINC", "AGE")

  ########## synthesize (BLACKerty, from all input data) ##########
  conf_data = data_mi
  start_data = data.frame("BLACK" = data_mi[,"BLACK"])
  synth_BLACK_good <- synth(start_data, conf_data, order)
  
  ######### synthesize (BLACKerty, permute 50% of the entries in each column of BLACKerty) ##########
  BLACK_conf <- data_mi %>%
    filter(BLACK == 1)
  # permute 50%
  sample_BLACK_conf <- permute_entries(BLACK_conf, 0.25)
  noBLACK_conf = data_mi %>%
    filter(BLACK == 0)
  conf_data <- rbind(sample_BLACK_conf, noBLACK_conf)
  start_data = data.frame("BLACK" = as.factor(c(rep(0, nrow(noBLACK_conf)), 
                                              rep(1, nrow(data_mi)-nrow(noBLACK_conf)))))
  synth_BLACK_med <- synth(start_data, conf_data, order)
  
  ######### synthesize (BLACKerty, permute 100% of the entries in each column of BLACKerty) ##########
  BLACK_conf <- data_mi %>%
    filter(BLACK == 1)
  # permute 50%
  sample_BLACK_conf <- permute_entries(BLACK_conf, .75)
  noBLACK_conf = data_mi %>%
    filter(BLACK == 0)
  conf_data <- rbind(sample_BLACK_conf, noBLACK_conf)
  start_data = data.frame("BLACK" = as.factor(c(rep(0, nrow(noBLACK_conf)), 
                                              rep(1, nrow(data_mi)-nrow(noBLACK_conf)))))
  synth_BLACK_bad <- synth(start_data, conf_data, order)
  
  ######### synthesize (BLACKerty, permute 50% of the entries in each column of BLACKerty) ##########
  BLACK_conf <- data_mi %>%
    filter(BLACK == 1)
  # permute 50%
  noBLACK_conf = data_mi %>%
    filter(BLACK == 0)
  sample_noBLACK_conf <- permute_entries(noBLACK_conf, 0.25)
  conf_data <- rbind(sample_noBLACK_conf, BLACK_conf)
  start_data = data.frame("BLACK" = as.factor(c(rep(0, nrow(noBLACK_conf)), 
                                              rep(1, nrow(data_mi)-nrow(noBLACK_conf)))))
  synth_noBLACK_med <- synth(start_data, conf_data, order)
  
  ######### synthesize (BLACKerty, permute 100% of the entries in each column of no BLACKerty) ##########
  BLACK_conf <- data_mi %>%
    filter(BLACK == 1)
  # permute 50%
  noBLACK_conf = data_mi %>%
    filter(BLACK == 0)
  sample_noBLACK_conf <- permute_entries(noBLACK_conf, .75)
  conf_data <- rbind(sample_noBLACK_conf, BLACK_conf)
  start_data = data.frame("BLACK" = as.factor(c(rep(0, nrow(noBLACK_conf)), 
                                              rep(1, nrow(data_mi)-nrow(noBLACK_conf)))))
  synth_noBLACK_bad <- synth(start_data, conf_data, order)

  return(list(synth_BLACK_good, synth_BLACK_med, synth_BLACK_bad, synth_noBLACK_med, synth_noBLACK_bad))
}
```

```{r}
calc_disc <- function(discriminator){
  # Evaluate discriminant-based metrics on the data using tree-based model
  tree_mod <- decision_tree(cost_complexity = tune()) %>%
    set_mode(mode = "classification") %>%
    set_engine(engine = "rpart")
  
  rpart_rec <- recipe(.source_label ~ ., data = discriminator$combined_data)
  
  grid = grid_regular(cost_complexity(), levels= 10)
  
  # set up discriminator
  d <- discriminator %>%
    add_propensities_tuned(
      grid = grid, 
      recipe = rpart_rec,
      spec = tree_mod
    )
  d
}
```

```{r}
corrected_pmse_ratio <- function(synth, times, minority_size){
  # create no BLACK sub-dataset
  conf_noBLACK <- data_mi %>%
    filter(BLACK == 0)
  synth_noBLACK <- synth %>%
    filter(BLACK == 0)
  disc_noBLACK <- discrimination(synth_noBLACK, conf_noBLACK)
  
  # fit model wtih pmse to our no BLACK sub-dataset
  res_noBLACK <- calc_disc(disc_noBLACK)
  # fit pmse ratio using size of minority group
  obj <- res_noBLACK %>%
    add_pmse() %>%
    add_pmse_ratio_scaled(size = minority_size, times = times)
  res_noBLACK <- obj[[1]]
  denoms_noBLACK <- obj[[2]]
  
  # create BLACK sub-dataset
  conf_BLACK <- data_mi %>%
    filter(BLACK == 1)
  synth_BLACK <- synth %>%
    filter(BLACK == 1)
  disc_BLACK <- discrimination(synth_BLACK, conf_BLACK)
  
  # fit model with pmse to our no BLACK sub-dataset
  res_BLACK <- calc_disc(disc_BLACK)
  
  # fit pmse ratio using size of minority group
  obj <- res_BLACK %>%
    add_pmse() %>%
    add_pmse_ratio_scaled(size = minority_size, times = times)
  res_BLACK <- obj[[1]]
  denoms_BLACK <- obj[[2]]
  
  return(list(res_noBLACK$pmse$.pmse_ratio[2], res_BLACK$pmse$.pmse_ratio[2], 
              res_noBLACK$pmse$.pmse[2]/denoms_noBLACK,
              res_BLACK$pmse$.pmse[2]/denoms_BLACK))
}
```

```{r}
# load data
data_mi <- read_csv("../data/data_mi.csv")
data_mi <- as.data.frame(unclass(data_mi),stringsAsFactors=TRUE)
data_mi$pov <- as.factor(data_mi$pov)
data_mi$BLACK <- as.factor(data_mi$BLACK)

n_ratios = 5
df_race <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(df_race) <- c("pmse", "synth_type", "BLACK_class")

for(i in 1:n_ratios){
  synth_list = make_all_synth_datasets(data_mi)
  synth_BLACK_good = synth_list[[1]]$synthetic_data
  synth_BLACK_good <- process_data(synth_BLACK_good)
  
  synth_BLACK_med = synth_list[[2]]$synthetic_data
  synth_BLACK_med <- process_data(synth_BLACK_med)
    
  synth_BLACK_bad = synth_list[[3]]$synthetic_data
  synth_BLACK_bad <- process_data(synth_BLACK_bad)
  
  synth_noBLACK_med = synth_list[[4]]$synthetic_data
  synth_noBLACK_med <- process_data(synth_noBLACK_med)
  
  synth_noBLACK_bad = synth_list[[5]]$synthetic_data
  synth_noBLACK_bad <- process_data(synth_noBLACK_bad)
  
  minority_size = sum(data_mi$BLACK == 1)
  times = 10
  
  pmse_ratio_good <- corrected_pmse_ratio(synth_BLACK_good, times, minority_size)
  pmse_ratio_BLACK_med <- corrected_pmse_ratio(synth_BLACK_med, times, minority_size)
  pmse_ratio_BLACK_bad <- corrected_pmse_ratio(synth_BLACK_bad, times, minority_size)
  pmse_ratio_noBLACK_med <- corrected_pmse_ratio(synth_noBLACK_med, times, minority_size)
  pmse_ratio_noBLACK_bad <- corrected_pmse_ratio(synth_noBLACK_bad, times, minority_size)
  
  pmse_ratios = c(c(pmse_ratio_noBLACK_bad[[1]], pmse_ratio_noBLACK_bad[[2]]),
                c(pmse_ratio_noBLACK_med[[1]], pmse_ratio_noBLACK_med[[2]]),
                c(pmse_ratio_good[[1]], pmse_ratio_good[[2]]), 
                c(pmse_ratio_BLACK_med[[1]], pmse_ratio_BLACK_med[[2]]),
                c(pmse_ratio_BLACK_bad[[1]], pmse_ratio_BLACK_bad[[2]]))
                
  synth_type = c("noBLACK_bad", "noBLACK_bad", "noBLACK_med", "noBLACK_med", "good", "good", "BLACK_med", "BLACK_med", "BLACK_bad", "BLACK_bad")
  BLACK_class = c("noBLACK", "BLACK", "noBLACK", "BLACK", "noBLACK", "BLACK", "noBLACK", "BLACK", "noBLACK", "BLACK")
  synth_type = factor(synth_type, levels = c("noBLACK_bad", "noBLACK_med", "good", "BLACK_med", "BLACK_bad"))
  
  plot <- data.frame(pmse = pmse_ratios, synth_type = synth_type, BLACK_class = BLACK_class)
  df_race <- rbind(df_race, plot)
}
```

```{r}
write_csv(df_race, "pmse_ratio_race.csv")
```








DEPRECATED




















This script will implement the two-model approach for the pMSE ratio discriminant-based metric.
For each element of the denominator of the pMSE ratio for the larger group, it will take a sample of size n (where n is the size of the smaller group) and then bootstrap this sample, taking a different initial sample each time. This will (according to the proof) create something with the same expected value under the null distribution as the minority group, allowing me to compare the 2-model approach's pMSE ratios.

I will code up the pMSE ratio function by group once I've gotten this version to work. For now, I'm doing it in a bit of a weird way.

```{r}
# library(tidyverse)
# library(ipumsr)
# library(srvyr)
# library(tidysynthesis)
# library(parsnip)
# library("data.table")
# library(recipes)
# library(devtools)
# load_all("../../syntheval")
# #library(syntheval)
# library(dials)
# library(tune)
# library(gtools)
# library(MASS)
# library(caret)
# library(gt)
# library(ggpubr)
# source("../add_pmse_ratio_size.R")
# set.seed(78483)

```

Load in data
```{r}
# process_data <- function(df){
#   df <- as.data.frame(unclass(df),stringsAsFactors=TRUE)
#   df$pov <- as.factor(df$pov)
#   df$BLACK <- as.factor(df$BLACK)
#   order = c("BLACK", "pov", "SEX", "EMPSTAT", "EDUC", "HCOVANY", "VETSTAT", "FTOTINC", "AGE")
#   df <- df %>%
#     dplyr::select(order)
#   df
# }
```

```{r}
# data_mi <- read_csv("../data/data_mi.csv")
# data_mi <- process_data(data_mi)
# 
# synth_good <- read_csv("../data/good_synth_black.csv")
# synth_good <- process_data(synth_good)
# 
# #synth_med <- read_csv("../data/med_synth_pov.csv")
# synth_med <- read_csv("../data/synth_75_black.csv")
# synth_med <- process_data(synth_med)
# 
# synth_bad <- read_csv("../data/bad_synth_black.csv")
# synth_bad <- process_data(synth_bad)
```

```{r}
# calc_disc <- function(discriminator){
#   # Evaluate discriminant-based metrics on the data using tree-based model
#   tree_mod <- decision_tree(cost_complexity = tune()) %>%
#     set_mode(mode = "classification") %>%
#     set_engine(engine = "rpart")
#   
#   rpart_rec <- recipe(.source_label ~ ., data = discriminator$combined_data)
#   
#   grid = grid_regular(cost_complexity(), levels= 10)
#   
#   # set up discriminator
#   d <- discriminator %>%
#     add_propensities_tuned(
#       grid = grid, 
#       recipe = rpart_rec,
#       spec = tree_mod
#     )
#   d
# }
```

Evaluate pMSE ratio with size change in denominator of majority group
```{r}
# disc_good = discrimination(synth_good, data_mi)
# res_good = calc_disc(disc_good)
# 
# disc_med = discrimination(synth_med, data_mi)
# res_med = calc_disc(disc_med)
# 
# disc_bad = discrimination(synth_bad, data_mi)
# res_bad = calc_disc(disc_bad)
```

```{r}
# corrected_pmse_ratio <- function(synth, times, minority_size){
#   # create not Black sub-dataset
#   conf_not_black <- data_mi %>%
#     filter(BLACK == 0)
#   synth_not_black <- synth %>%
#     filter(BLACK == 0)
#   disc_not_black <- discrimination(synth_not_black, conf_not_black)
#   
#   # fit model wtih pmse to our not Black sub-dataset
#   res_not_black <- calc_disc(disc_not_black)
#   # fit pmse ratio using size of minority group
#   obj <- res_not_black %>%
#     add_pmse() %>%
#     add_pmse_ratio_scaled(size = minority_size, times = times)
#   res_not_black <- obj[[1]]
#   denoms_not_black <- obj[[2]]
#   
#   # create Black sub-dataset
#   conf_black <- data_mi %>%
#     filter(BLACK == 1)
#   synth_black <- synth %>%
#     filter(BLACK == 1)
#   disc_black <- discrimination(synth_black, conf_black)
#   
#   # fit model wtih pmse to Black sub-dataset
#   res_black <- calc_disc(disc_black)
#   
#   # fit pmse ratio using size of minority group
#   obj <- res_black %>%
#     add_pmse() %>%
#     add_pmse_ratio_scaled(size = minority_size, times = times)
#   res_black <- obj[[1]]
#   denoms_black <- obj[[2]]
#   
#   return(list(res_not_black$pmse$.pmse_ratio[2], res_black$pmse$.pmse_ratio[2], res_not_black$pmse$.pmse[2]/denoms_not_black, res_black$pmse$.pmse[2]/denoms_black))
# }
```

```{r}
# minority_size = sum(data_mi$BLACK == 1)
# times = 20
# # 
# # conf_not_black <- data_mi %>%
# #     filter(BLACK == 0)
# # synth_not_black <- synth_good %>%
# #     filter(BLACK == 0)
# # disc_not_black <- discrimination(synth_not_black, conf_not_black)
# # res_not_black <- calc_disc(disc_not_black)  
# # obj <- res_not_black %>%
# #     add_pmse() %>%
# #     add_pmse_ratio_scaled(size = minority_size, times = times)
# # res_not_black <- obj[[1]]
# # denoms_not_black <- obj[[2]]
# # 
# # c(res_not_black, ans)<- add_pmse_ratio_scaled(res_not_black, size = minority_size, times = 1)
# 
# pmse_ratio_good <- corrected_pmse_ratio(synth_good, times, minority_size)
# pmse_ratio_med <- corrected_pmse_ratio(synth_med, times, minority_size)
# pmse_ratio_bad <- corrected_pmse_ratio(synth_bad, times, minority_size)
```

Calculate confidence intervals using denominators
```{r}
# good_quantiles_not_black <- quantile(pmse_ratio_good[[3]], c(.05, .95))
# good_quantiles_black <- quantile(pmse_ratio_good[[4]], c(.05, .95))
# 
# med_quantiles_not_black <- quantile(pmse_ratio_med[[3]], c(.05, .95))
# med_quantiles_black <- quantile(pmse_ratio_med[[4]], c(.05, .95))
# 
# bad_quantiles_not_black <- quantile(pmse_ratio_bad[[3]], c(.05, .95))
# bad_quantiles_black <- quantile(pmse_ratio_bad[[4]], c(.05, .95))
```

Graph results
```{r}
# pmse_ratios = c(c(pmse_ratio_good[[1]], pmse_ratio_good[[2]]), 
#                 c(pmse_ratio_med[[1]], pmse_ratio_med[[2]]),
#                 c(pmse_ratio_bad[[1]], pmse_ratio_bad[[2]]))
# 
# lows = c(good_quantiles_not_black[1], good_quantiles_black[1],
#          med_quantiles_not_black[1], med_quantiles_black[1],
#          bad_quantiles_not_black[1],  bad_quantiles_black[1])
# 
# highs = c(good_quantiles_not_black[2],good_quantiles_black[2],
#          med_quantiles_not_black[2],med_quantiles_black[2],
#          bad_quantiles_not_black[2], bad_quantiles_black[2])
# 
# synth_type = c("good", "good", "med", "med", "bad", "bad")
# black_indic = c("not_black", "black", "not_black", "black", "not_black", "black")
# synth_type = factor(synth_type, levels = c("bad", "med", "good"))
# 
# plot <- data.frame(pmse = pmse_ratios, synth_type = synth_type, black = black_indic, lows = lows, highs = highs)
# ggplot(plot, aes(x = synth_type, group = black, y = pmse, color = black))+
#   geom_point()+
#   geom_pointrange(aes(ymin = lows, ymax = highs))+
#   ylab("pMSE Ratio")+
#   xlab("Synthesis Type")+
#   theme_classic()
```






