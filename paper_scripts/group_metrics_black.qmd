---
title: "group_metrics_black"
format:
  html:
    theme: default
---

One model approach

```{r}
library(tidyverse)
library(ipumsr)
library(srvyr)
library(tidysynthesis)
library(parsnip)
library("data.table")
library(recipes)
library(devtools)
load_all("../../syntheval")
library(dials)
library(tune)
library(gtools)
library(MASS)
library(caret)
library(gt)
library(ggpubr)
source("../add_pmse_group.R")
source("../permutation_sig.R")
set.seed(78483)
```


Load in data
```{r}
process_data <- function(df){
  df <- as.data.frame(unclass(df),stringsAsFactors=TRUE)
  df$pov <- as.factor(df$pov)
  df$BLACK <- as.factor(df$BLACK)
  order = c("BLACK", "pov", "SEX", "EMPSTAT", "EDUC", "HCOVANY", "VETSTAT", "FTOTINC", "AGE")
  df <- df %>%
    dplyr::select(order)
  df
}
```

```{r}
data_mi <- read_csv("../data/data_mi.csv")
data_mi <- process_data(data_mi)

synth_good <- read_csv("../data/good_synth_black.csv")
synth_good <- process_data(synth_good)

#synth_med <- read_csv("../data/med_synth_pov.csv")
synth_med <- read_csv("../data/synth_75_black.csv")
synth_med <- process_data(synth_med)

synth_bad <- read_csv("../data/bad_synth_black.csv")
synth_bad <- process_data(synth_bad)
```

```{r}
calc_disc <- function(discriminator){
  # Evaluate discriminant-based metrics on the data using tree-based model
  tree_mod <- decision_tree(cost_complexity = tune()) %>%
    set_mode(mode = "classification") %>%
    set_engine(engine = "rpart")
  
  rpart_rec <- recipe(.source_label ~ ., data = discriminator$combined_data)
  
  grid = grid_regular(cost_complexity(), levels= 10)
  
  # set up discriminator
  d <- discriminator %>%
    add_propensities_tuned(
      grid = grid, 
      recipe = rpart_rec,
      spec = tree_mod
    )
  d
}
```

Make discriminators
```{r}
disc_good = discrimination(synth_good, data_mi)
res_good = calc_disc(disc_good)

disc_med = discrimination(synth_med, data_mi)
res_med = calc_disc(disc_med)

disc_bad = discrimination(synth_bad, data_mi)
res_bad = calc_disc(disc_bad)
```

Run all metrics
```{r}
res_good <- res_good %>%
  add_discriminator_auc(group = c("pov")) %>%
  add_pmse(group = c("pov")) %>%
  add_specks(group = c("pov"))

res_med <- res_med %>%
  add_discriminator_auc(group = c("pov")) %>%
  add_pmse(group = c("pov")) %>%
  add_specks(group = c("pov"))

res_bad <- res_bad %>%
  add_discriminator_auc(group = c("pov")) %>%
  add_pmse(group = c("pov")) %>%
  add_specks(group = c("pov"))
```

Plot results
```{r}
good_auc = res_good$discriminator_auc$.estimate[3:4]
med_auc = res_med$discriminator_auc$.estimate[3:4]
bad_auc = res_bad$discriminator_auc$.estimate[3:4]

good_pmse = res_good$pmse$.pmse[3:4]
med_pmse = res_med$pmse$.pmse[3:4]
bad_pmse = res_bad$pmse$.pmse[3:4]

good_specks = res_good$specks$.specks[3:4]
med_specks = res_med$specks$.specks[3:4]
bad_specks = res_bad$specks$.specks[3:4]

aucs = c(good_auc, med_auc, bad_auc)
pmses = c(good_pmse, med_pmse, bad_pmse)
speckss = c(good_specks, med_specks, bad_specks)
synth_type = c("good", "good", "med", "med", "bad", "bad")
race = c("white", "Black", "white", "Black", "white", "Black")
synth_type = factor(synth_type, levels = c("bad", "med", "good"))

plot <- data.frame(auc = aucs, pmse = pmses, specks = speckss, synth_type = synth_type, race = race)
ggplot(plot, aes(x = synth_type, group = race, y = auc, color = race))+
  geom_point()+
  ylab("AUC")+
  xlab("Synthesis Type")+
  theme_classic()

ggplot(plot, aes(x = synth_type, group = race, y = pmse, color = race))+
  geom_point()+
  ylab("pMSE")+
  xlab("Synthesis Type")+
  theme_classic()

ggplot(plot, aes(x = synth_type, group = race, y = specks, color = race))+
  geom_point()+
  ylab("SPECKS")+
  xlab("Synthesis Type")+
  theme_classic()
```

Permutation test AUC
```{r}
perm_auc_good = permutation_sig(data_mi, synth_good, "pov", add_discriminator_auc, 30, calc_disc, "discriminator_auc")
perm_auc_med = permutation_sig(data_mi, synth_med, "pov", add_discriminator_auc, 30, calc_disc, "discriminator_auc")
perm_auc_bad = permutation_sig(data_mi, synth_bad, "pov", add_discriminator_auc, 30, calc_disc, "discriminator_auc")

perm_pmse_good = permutation_sig(data_mi, synth_good, "pov", add_pmse, 30, calc_disc, "pmse")
perm_pmse_med = permutation_sig(data_mi, synth_med, "pov", add_pmse, 30, calc_disc, "pmse")
perm_pmse_bad = permutation_sig(data_mi, synth_bad, "pov", add_pmse, 30, calc_disc, "pmse")

perm_specks_good = permutation_sig(data_mi, synth_good, "pov", add_specks, 30, calc_disc, "specks")
perm_specks_med = permutation_sig(data_mi, synth_med, "pov", add_specks, 30, calc_disc, "specks")
perm_specks_bad = permutation_sig(data_mi, synth_bad, "pov", add_specks, 30, calc_disc, "specks")
```

```{r}
perm_auc_good$lab = "perm_auc_good"
perm_auc_med$lab = "perm_auc_med"
perm_auc_bad$lab = "perm_auc_bad"

perm_pmse_good$lab = "perm_pmse_good"
perm_pmse_med$lab = "perm_pmse_med"
perm_pmse_bad$lab = "perm_pmse_bad"

perm_specks_good$lab = "perm_specks_good"
perm_specks_med$lab = "perm_specks_med"
perm_specks_bad$lab = "perm_specks_bad"

write.csv(rbind(perm_auc_good, perm_auc_med, perm_auc_bad,
      perm_pmse_good, perm_pmse_med, perm_pmse_bad,
      perm_specks_good, perm_specks_med, perm_specks_bad), "../paper_scripts/perm_30_black.csv")

perm_test = read.csv("../paper_scripts/perm_30_black.csv")
perm_auc_good = perm_test[perm_test$lab == "perm_auc_good",]
perm_auc_med = perm_test[perm_test$lab == "perm_auc_med",]
perm_auc_bad = perm_test[perm_test$lab == "perm_auc_bad",]

perm_pmse_good = perm_test[perm_test$lab == "perm_pmse_good",]
perm_pmse_med = perm_test[perm_test$lab == "perm_pmse_med",]
perm_pmse_bad = perm_test[perm_test$lab == "perm_pmse_bad",]

perm_specks_good = perm_test[perm_test$lab == "perm_specks_good",]
perm_specks_med = perm_test[perm_test$lab == "perm_specks_med",]
perm_specks_bad = perm_test[perm_test$lab == "perm_specks_bad",]


perm_test = rbind(perm_auc_good, perm_auc_med, perm_auc_bad,
      perm_pmse_good, perm_pmse_med, perm_pmse_bad,
      perm_specks_good, perm_specks_med, perm_specks_bad)
```

```{r}
1-ecdf(abs(perm_auc_good$pov0-perm_auc_good$pov1))(abs(good_auc[1]-good_auc[2]))
1-ecdf(abs(perm_auc_med$pov0-perm_auc_med$pov1))(abs(med_auc[1]-med_auc[2]))
1-ecdf(abs(perm_auc_bad$pov0-perm_auc_bad$pov1))(abs(bad_auc[1]-bad_auc[2]))

1-ecdf(abs(perm_pmse_good$pov0-perm_pmse_good$pov1))(abs(good_pmse[1]-good_pmse[2]))
1-ecdf(abs(perm_pmse_med$pov0-perm_pmse_med$pov1))(abs(med_pmse[1]-med_pmse[2]))
1-ecdf(abs(perm_pmse_bad$pov0-perm_pmse_bad$pov1))(abs(bad_pmse[1]-bad_pmse[2]))

1-ecdf(abs(perm_specks_good$pov0-perm_specks_good$pov1))(abs(good_specks[1]-good_specks[2]))
1-ecdf(abs(perm_specks_med$pov0-perm_specks_med$pov1))(abs(med_specks[1]-med_specks[2]))
1-ecdf(abs(perm_specks_bad$pov0-perm_specks_bad$pov1))(abs(bad_specks[1]-bad_specks[2]))
```

```{r}
perm_pmse_good$pov1
 good_pmse[2]

```
