---
title: "group_metrics2"
format: pdf
---

---
title: "group_metrics"
format:
  html:
    theme: default
---

One model adn two model approach for poverty

```{r}
library(tidyverse)
library(ipumsr)
library(srvyr)
library(tidysynthesis)
library(parsnip)
library("data.table")
library(recipes)
library(devtools)
load_all("../../syntheval")
library(dials)
library(tune)
library(gtools)
library(MASS)
library(caret)
library(gt)
library(ggpubr)
source("../add_pmse_group.R")
source("../permutation_sig.R")
set.seed(78483)
```


Load in data
```{r}
process_data <- function(df){
  df <- as.data.frame(unclass(df),stringsAsFactors=TRUE)
  df$pov <- as.factor(df$pov)
  df$BLACK <- as.factor(df$BLACK)
  order = c("BLACK", "pov", "SEX", "EMPSTAT", "EDUC", "HCOVANY", "VETSTAT", "FTOTINC", "AGE")
  df <- df %>%
    dplyr::select(order)
  df
}
```

```{r}
# function that takes start data and confidential data, and synthesizes dataset
synth <- function(start_data, conf_data, var_order){
  # synthesize categorical first, then continuous
  visit_sequence = visit_sequence(var_order, start_data, type = "manual")
  roadmap = roadmap(conf_data, start_data, visit_sequence)
  recipe = construct_recipes(roadmap = roadmap)
  
  tree_cl <- parsnip::decision_tree(cost_complexity = .0001) %>%
    set_mode(mode = "classification") %>%
    set_engine(engine = "rpart")
  tree_reg <- parsnip::decision_tree(cost_complexity = .0001) %>%
    set_mode(mode = "regression") %>%
    set_engine(engine = "rpart")
  
  synth_algorithms = list()
  for (i in 1:length(var_order)){
    if(class(conf_data[,var_order[i]]) == "factor"){
      synth_algorithms[[i]] = tree_cl
    } else{
      synth_algorithms[[i]] = tree_reg
    }
  }
  
  synth_spec = synth_spec(roadmap,
                          synth_algorithms = synth_algorithms,
                          recipe,
                          predict_methods = sample_rpart)
  
  # noise
  noise <- noise(roadmap = roadmap,
                 add_noise = FALSE,
                 exclusions = 0)
  
  # constraints
  constraints <- constraints(roadmap = roadmap,
                             constraints = NULL,
                             max_z = 0)
  
  replicates <- replicates(replicates = 1,
                           workers = 1,
                           summary_function = NULL)
  
  # create a presynth object
  presynth1 <- presynth(
    roadmap = roadmap,
    synth_spec = synth_spec,
    noise = noise, 
    constraints = constraints,
    replicates = replicates
  )
  synthesized = synthesize(presynth1, progress = TRUE)
  synthesized
}
```

```{r}
permute_entries <- function(dt, k) {
  n <- nrow(dt)
  permuted_dt <- dt
  num_entries_to_permute <- round(n * k)
  
  for (col in names(dt)) {
    indices <- sample(1:n, num_entries_to_permute, replace = FALSE)
    indices_perm <- permute(indices)
    permuted_dt[indices_perm,col] <- permuted_dt[indices, col]
  }
  
  return(permuted_dt)
}
```

```{r}
make_all_synth_datasets <- function(data_mi){
  order = c("pov", "SEX", "EMPSTAT", "EDUC", "HCOVANY", "VETSTAT", "FTOTINC", "AGE")

  ########## synthesize (BLACKerty, from all input data) ##########
  conf_data = data_mi
  start_data = data.frame("BLACK" = data_mi[,"BLACK"])
  synth_BLACK_good <- synth(start_data, conf_data, order)
  
  ######### synthesize (BLACKerty, permute 50% of the entries in each column of BLACKerty) ##########
  BLACK_conf <- data_mi %>%
    filter(BLACK == 1)
  # permute 50%
  sample_BLACK_conf <- permute_entries(BLACK_conf, 0.25)
  noBLACK_conf = data_mi %>%
    filter(BLACK == 0)
  conf_data <- rbind(sample_BLACK_conf, noBLACK_conf)
  start_data = data.frame("BLACK" = as.factor(c(rep(0, nrow(noBLACK_conf)), 
                                              rep(1, nrow(data_mi)-nrow(noBLACK_conf)))))
  synth_BLACK_med <- synth(start_data, conf_data, order)
  
  ######### synthesize (BLACKerty, permute 100% of the entries in each column of BLACKerty) ##########
  BLACK_conf <- data_mi %>%
    filter(BLACK == 1)
  # permute 50%
  sample_BLACK_conf <- permute_entries(BLACK_conf, .75)
  noBLACK_conf = data_mi %>%
    filter(BLACK == 0)
  conf_data <- rbind(sample_BLACK_conf, noBLACK_conf)
  start_data = data.frame("BLACK" = as.factor(c(rep(0, nrow(noBLACK_conf)), 
                                              rep(1, nrow(data_mi)-nrow(noBLACK_conf)))))
  synth_BLACK_bad <- synth(start_data, conf_data, order)
  
  ######### synthesize (BLACKerty, permute 50% of the entries in each column of BLACKerty) ##########
  BLACK_conf <- data_mi %>%
    filter(BLACK == 1)
  # permute 50%
  noBLACK_conf = data_mi %>%
    filter(BLACK == 0)
  sample_noBLACK_conf <- permute_entries(noBLACK_conf, 0.25)
  conf_data <- rbind(sample_noBLACK_conf, BLACK_conf)
  start_data = data.frame("BLACK" = as.factor(c(rep(0, nrow(noBLACK_conf)), 
                                              rep(1, nrow(data_mi)-nrow(noBLACK_conf)))))
  synth_noBLACK_med <- synth(start_data, conf_data, order)
  
  ######### synthesize (BLACKerty, permute 100% of the entries in each column of no BLACKerty) ##########
  BLACK_conf <- data_mi %>%
    filter(BLACK == 1)
  # permute 50%
  noBLACK_conf = data_mi %>%
    filter(BLACK == 0)
  sample_noBLACK_conf <- permute_entries(noBLACK_conf, .75)
  conf_data <- rbind(sample_noBLACK_conf, BLACK_conf)
  start_data = data.frame("BLACK" = as.factor(c(rep(0, nrow(noBLACK_conf)), 
                                              rep(1, nrow(data_mi)-nrow(noBLACK_conf)))))
  synth_noBLACK_bad <- synth(start_data, conf_data, order)

  return(list(synth_BLACK_good, synth_BLACK_med, synth_BLACK_bad, synth_noBLACK_med, synth_noBLACK_bad))
}
```


```{r}
calc_disc <- function(discriminator){
  # Evaluate discriminant-based metrics on the data using tree-based model
  tree_mod <- decision_tree(cost_complexity = tune()) %>%
    set_mode(mode = "classification") %>%
    set_engine(engine = "rpart")
  
  rpart_rec <- recipe(.source_label ~ ., data = discriminator$combined_data)
  
  grid = grid_regular(cost_complexity(), levels= 10)
  
  # set up discriminator
  d <- discriminator %>%
    add_propensities_tuned(
      grid = grid, 
      recipe = rpart_rec,
      spec = tree_mod
    )
  d
}
```

Going to try two-model approach now instead to see if that improves things
```{r}
fit_two_model <- function(synth, conf, calc_disc, synth_type){
  # BLACK disc
  synth_BLACK = synth[synth$BLACK == 1,]
  conf_BLACK = conf[conf$BLACK == 1,]
  disc = discrimination(synth_BLACK, conf_BLACK)
  res = calc_disc(disc)
  
  res <- res %>%
    add_discriminator_auc() %>%
    add_specks()
  
  auc_BLACK = res$discriminator_auc$.estimate[2]
  specks_BLACK = res$specks$.specks[2]
  
  # no BLACK disc
  synth_noBLACK = synth[synth$BLACK == 0,]
  conf_noBLACK = conf[conf$BLACK == 0,]
  disc = discrimination(synth_noBLACK, conf_noBLACK)
  res = calc_disc(disc)
  
  res <- res %>%
    add_discriminator_auc() %>%
    add_specks()
  
  auc_noBLACK = res$discriminator_auc$.estimate[2]
  specks_noBLACK = res$specks$.specks[2]
  
  return(data.frame(aucs = c(auc_BLACK, auc_noBLACK), 
             speckss = c(specks_BLACK, specks_noBLACK), 
             synth_type = rep(synth_type, 2),
             BLACK_class = c("BLACK", "noBLACK")))
  
}
```

Given a discriminator, get every number of interest (one and two model approaches)
```{r}
get_nums <- function(synth, data_mi, calc_disc, synth_type){
  disc = discrimination(synth, data_mi)
  res = calc_disc(disc)
  res <- res %>%
    add_discriminator_auc(group = c("BLACK")) %>%
    add_specks(group = c("BLACK"))
  auc <- res$discriminator_auc$.estimate[3:4]
  specks <- res$specks$.specks[3:4]
  one_model_df <- data.frame(aucs = auc, 
                             speckss = specks, 
                             synth_type = rep(synth_type, 2),
                             BLACK_class = c("noBLACK", "BLACK"))
    
  two_model_df <- fit_two_model(synth, data_mi, calc_disc, synth_type)
  
  return(list(one_model_df, two_model_df))
}
```

```{r}
# load data
data_mi <- read_csv("../data/data_mi.csv")
data_mi <- as.data.frame(unclass(data_mi),stringsAsFactors=TRUE)
data_mi$pov <- as.factor(data_mi$pov)
data_mi$BLACK <- as.factor(data_mi$BLACK)
times = 5

one_model_df <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(one_model_df) <- c("aucs", "speckss", "synth_type", "pov_class")

two_model_df <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(two_model_df) <- c("aucs", "speckss", "synth_type", "pov_class")

for (time in 1:times){
  synth_list = make_all_synth_datasets(data_mi)
  synth_pov_good = synth_list[[1]]$synthetic_data
  synth_pov_good <- process_data(synth_pov_good)
  list_dfs <- get_nums(synth_pov_good, data_mi, calc_disc, "good")
  one_model_df <- rbind(one_model_df, list_dfs[[1]])
  two_model_df <- rbind(two_model_df, list_dfs[[2]])
  
  synth_pov_med = synth_list[[2]]$synthetic_data
  synth_pov_med <- process_data(synth_pov_med)
  list_dfs <- get_nums(synth_pov_med, data_mi, calc_disc, "BLACK_med")
  one_model_df <- rbind(one_model_df, list_dfs[[1]])
  two_model_df <- rbind(two_model_df, list_dfs[[2]])
  
  synth_pov_bad = synth_list[[3]]$synthetic_data
  synth_pov_bad <- process_data(synth_pov_bad)
  list_dfs <- get_nums(synth_pov_bad, data_mi, calc_disc, "BLACK_bad")
  one_model_df <- rbind(one_model_df, list_dfs[[1]])
  two_model_df <- rbind(two_model_df, list_dfs[[2]])
  
  synth_nopov_med = synth_list[[4]]$synthetic_data
  synth_nopov_med <- process_data(synth_nopov_med)
  list_dfs <- get_nums(synth_nopov_med, data_mi, calc_disc, "noBLACK_med")
  one_model_df <- rbind(one_model_df, list_dfs[[1]])
  two_model_df <- rbind(two_model_df, list_dfs[[2]])
  
  synth_nopov_bad = synth_list[[5]]$synthetic_data
  synth_nopov_bad <- process_data(synth_nopov_bad)
  list_dfs <- get_nums(synth_nopov_bad, data_mi, calc_disc, "noBLACK_bad")
  one_model_df <- rbind(one_model_df, list_dfs[[1]])
  two_model_df <- rbind(two_model_df, list_dfs[[2]])
}
```

Save dataframes

```{r}
# one_model_df$synth_type = ifelse(one_model_df$synth_type == "good", "good", 
#                                  ifelse(one_model_df$synth_type == "pov_med", "BLACK_med",
#                                         ifelse(one_model_df$synth_type == "nopov_med", "noBLACK_med",
#                                                ifelse(one_model_df$synth_type == "pov_bad", "BLACK_bad",
#                                                       "noBLACK_bad"))))
# two_model_df$synth_type = ifelse(two_model_df$synth_type == "good", "good", 
#                                  ifelse(two_model_df$synth_type == "pov_med", "BLACK_med",
#                                         ifelse(two_model_df$synth_type == "nopov_med", "noBLACK_med",
#                                                ifelse(two_model_df$synth_type == "pov_bad", "BLACK_bad",
#                                                       "noBLACK_bad"))))
# 
# colnames(one_model_df) = c("X", "aucs", "speckss", "synth_type", "BLACK_class")
```

```{r}
write.csv(one_model_df, "one_model_df_black.csv")
write.csv(two_model_df, "two_model_df_black.csv")
```

```{r}
one_model_df <- read.csv("one_model_df_black.csv")
two_model_df <- read.csv("two_model_df_black.csv")
```

Plot results
```{r}
one_model_df$synth_type = factor(one_model_df$synth_type, levels = c("noBLACK_bad", "noBLACK_med", "good", "BLACK_med", "BLACK_bad"))
two_model_df$synth_type = factor(one_model_df$synth_type, levels = c("noBLACK_bad", "noBLACK_med", "good", "BLACK_med", "BLACK_bad"))

one_auc <- ggplot(one_model_df, aes(x = synth_type, y = aucs, color = BLACK_class))+
  geom_point()+
  ylab("AUC")+
  xlab("Synthesis Type")+
  theme_classic()

one_specks <- ggplot(one_model_df, aes(x = synth_type,  y = speckss, color = BLACK_class))+
  geom_point()+
  ylab("SPECKS")+
  xlab("Synthesis Type")+
  theme_classic()

two_auc <- ggplot(two_model_df, aes(x = synth_type,  y = aucs, color = BLACK_class))+
  geom_point()+
  ylab("AUC")+
  xlab("Synthesis Type")+
  theme_classic()

two_specks <- ggplot(two_model_df, aes(x = synth_type,  y = speckss, color = BLACK_class))+
  geom_point()+
  ylab("SPECKS")+
  xlab("Synthesis Type")+
  theme_classic()
```



```{r}
ggarrange(one_auc, one_specks, nrow = 1)
ggarrange(two_auc, two_specks, nrow = 1)
```



