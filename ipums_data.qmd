---
title: "ipums_pull"
format:
  html:
    theme: default
---

This script is meant to pull IPUMS data and start basic synthesis with it based on gender.
It will be synthesizing health related variabels following Aaron's health-insurance.html script.
```{r}
library(tidyverse)
library(ipumsr)
library(srvyr)
library(tidysynthesis)
library(parsnip)
library("data.table")
library(recipes)
library(devtools)
load_all('../syntheval')
library(syntheval)
library(dials)
library(tune)
```


```{r}
# create a new extract object
extract_definition <- define_extract_usa(
  description = "This is an example extract to submit via API.",
  samples = "us2012a",
  variables = c("AGE", "SEX", "RACE", "STATEFIP", "EMPSTAT", "HCOVANY",
                "HCOVPRIV", "HCOVPUB", "HINSEMP", "HINSPUR", "HINSTRI",
                "HINSCARE", "HINSCAID", "HINSVA", "REPWTP")
)
set_ipums_api_key("59cba10d8a5da536fc06b59d5510a9b000d64836bea03cf84b15b1c4")
# submit the extract to IPUMS USA for processing
submitted_extract <- submit_extract(extract_definition)

# access the extract number, stored in the return value of submit_extract
submitted_extract$number

wait_for_extract(submitted_extract)

# This will save the extract files to the current directory
# use the download_dir argument to specify a different location
# The return value is the path to the DDI codebook file, which can then be passed to read_ipums_micro to read the data
path_to_ddi_file <- download_extract(submitted_extract, download_dir = "data")


```

```{r}
data <- read_ipums_micro("data/usa_00001.xml")
data <- data |>
  mutate(across(where(is.labelled), ~as_factor(lbl_clean(.x))))
```

```{r}
svy <- as_survey(
  data, 
  weight = PERWT , 
  repweights = matches("REPWTP[0-9]+"),
  type = "JK1", 
  scale = 4 / 80, 
  rscales = rep(1, 80), 
  mse = TRUE
)
```

```{r}
states <- c("Michigan")

svy <- svy |>
  filter(AGE %in% as.character(19:64)) |>
  filter(STATEFIP %in% states)
```

```{r}
svy |>
  summarize(
    population = survey_total()
  )

svy |>
  group_by(HCOVANY) |>
  summarize(
    population = survey_total()
  )

svy |>
  group_by(HCOVANY) |>
  summarize(
    population = survey_prop()
  )
```


```{r}
data_mi <- data %>%
  select(c(7, 13:15, 17, 26)) %>%
  filter(STATEFIP == "Michigan") %>%
  filter(as.numeric(AGE) >= 19) %>%
  select(c(-1)) %>%
  mutate(HCOVANY = as.character(HCOVANY),
         EMPSTAT = as.character(EMPSTAT),
         SEX = as.character(SEX),
         AGE = as.numeric(AGE),
         RACE = as.factor(RACE))
data_mi <- data_mi %>%
  mutate(HCOVANY = as.factor(ifelse(startsWith(data_mi$HCOVANY, "No"), 0, 1)),
         EMPSTAT = as.factor(ifelse(startsWith(data_mi$EMPSTAT, "Not"), 0, 1)),
         SEX = as.factor(ifelse(data_mi$SEX == "Female", 1, 0)))
```

```{r}
table(data_mi$SEX, data_mi$RACE)
prop.table(table(data_mi$SEX, data_mi$HCOVANY), 1)
prop.table(table(data_mi$SEX, data_mi$EMPSTAT), 1)

data_mi <- data_mi[, c(1, 4, 5)]
```

Sex is column 0 1, so we observe that males (0) are less likely than females to have health insurance coverage and more likely than females to be employed. 

We now try to synthesize this data using tidysynthesis, first doing synthesis fairly well, and then messing up the input data to purposely do a poor job for women.
```{r}
# start with the input data
start_data = data_mi[,1]
conf_data = data_mi
visit_sequence = visit_sequence(conf_data, start_data, type = "default")
roadmap = roadmap(conf_data, start_data, visit_sequence)
recipe = construct_recipes(roadmap = roadmap)
cl_mod <- parsnip::logistic_reg() %>% 
  parsnip::set_engine(engine = "glm") %>%
  parsnip::set_mode(mode = "classification")
lm_mod <- parsnip::linear_reg() %>% 
  parsnip::set_engine(engine = "lm") %>%
  parsnip::set_mode(mode = "regression")

synth_spec = synth_spec(roadmap,
                        synth_algorithms = cl_mod,
                        recipe,
                        predict_methods = sample_rpart)

# noise
noise <- noise(roadmap = roadmap,
               add_noise = FALSE,
               exclusions = 0)

# constraints
constraints <- constraints(roadmap = roadmap,
                           constraints = NULL,
                           max_z = 0)

replicates <- replicates(replicates = 1,
                         workers = 1,
                         summary_function = NULL)

# create a presynth object
presynth1 <- presynth(
  roadmap = roadmap,
  synth_spec = synth_spec,
  noise = noise, 
  constraints = constraints,
  replicates = replicates
)

# synth
set.seed(1)
synthesized = synthesize(presynth1, progress = TRUE)
```

```{r}
library(gtools)
# start with the input data
set.seed(1)
start_data = data.frame(SEX = permute(data_mi$SEX))
conf_data = cbind(start_data, data_mi[,-1])
visit_sequence = visit_sequence(conf_data, start_data, type = "default")
roadmap = roadmap(conf_data, start_data, visit_sequence)
recipe = construct_recipes(roadmap = roadmap)
cl_mod <- parsnip::logistic_reg() %>% 
  parsnip::set_engine(engine = "glm") %>%
  parsnip::set_mode(mode = "classification")
lm_mod <- parsnip::linear_reg() %>% 
  parsnip::set_engine(engine = "lm") %>%
  parsnip::set_mode(mode = "regression")

synth_spec = synth_spec(roadmap,
                        synth_algorithms = cl_mod,
                        recipe,
                        predict_methods = sample_rpart)

# noise
noise <- noise(roadmap = roadmap,
               add_noise = FALSE,
               exclusions = 0)

# constraints
constraints <- constraints(roadmap = roadmap,
                           constraints = NULL,
                           max_z = 0)

replicates <- replicates(replicates = 1,
                         workers = 1,
                         summary_function = NULL)

# create a presynth object
presynth1 <- presynth(
  roadmap = roadmap,
  synth_spec = synth_spec,
  noise = noise, 
  constraints = constraints,
  replicates = replicates
)

# synth
set.seed(1)
synthesized_permuted = synthesize(presynth1, progress = TRUE)
```

```{r}
synthetic_data = synthesized$synthetic_data
synthetic_data_permuted = synthesized_permuted$synthetic_data
data_permuted = conf_data
```

```{r}
# Evaluate discriminant-based metrics on the data using tree-based model

tree_mod <- decision_tree(cost_complexity = tune()) %>%
  set_mode(mode = "classification") %>%
  set_engine(engine = "rpart")

rpart_rec <- recipe(.source_label ~ ., data = discrimination(synthetic_data, data_mi)$combined_data)

grid = grid_regular(cost_complexity(), levels= 10)
# set up discriminator
d <- discrimination(synthetic_data, data_mi) %>%
  add_propensities_tuned(
    grid = grid, 
    recipe = rpart_rec,
    spec = tree_mod
  ) %>%
  add_discriminator_auc() %>%
  add_specks() %>%
  add_pmse()
d$discriminator_auc
d$pmse
d$specks
```

.51 discriminator AUC, .0004 pMSE, .027 SPECKS for data created from true underlying data.

```{r}
# Evaluate discriminant-based metrics on the data using tree-based model
tree_mod <- decision_tree(cost_complexity = tune()) %>%
  set_mode(mode = "classification") %>%
  set_engine(engine = "rpart")

rpart_rec <- recipe(.source_label ~ ., data = discrimination(synthetic_data_permuted, data_mi)$combined_data)

grid = grid_regular(cost_complexity(), levels= 10)
# set up discriminator
d <- discrimination(synthetic_data_permuted, data_mi) %>%
  add_propensities_tuned(
    grid = grid, 
    recipe = rpart_rec,
    spec = tree_mod
  ) %>%
  add_discriminator_auc() %>%
  add_specks() %>%
  add_pmse()
d$discriminator_auc
d$pmse
d$specks
```


AUC = .53
pMSE = .00078
SPECKS = .046

Says that current metrics (with this model) think that our bad synthetic data (created based on permuted gender) do a good job matching the original data -- need to double check everything though/would like to go over in meeting!

