---
title: "ipums_data4"
format:
  html:
    theme: default
---

Script to compare synthesis methods and models and effect of permutation for individual and family income, to test the impact of the permuting.
```{r}
library(tidyverse)
library(ipumsr)
library(srvyr)
library(tidysynthesis)
library(parsnip)
library("data.table")
library(recipes)
library(devtools)
load_all('../syntheval')
library(syntheval)
library(dials)
library(tune)
library(gtools)
```

```{r}
# create a new extract object
extract_definition <- define_extract_usa(
  description = "Extract",
  samples = "us2022a",
  variables = c("INCTOT", "FTOTINC")
)
set_ipums_api_key("59cba10d8a5da536fc06b59d5510a9b000d64836bea03cf84b15b1c4")
# submit the extract to IPUMS USA for processing
submitted_extract <- submit_extract(extract_definition)

# access the extract number, stored in the return value of submit_extract
submitted_extract$number

wait_for_extract(submitted_extract)

# This will save the extract files to the current directory
# use the download_dir argument to specify a different location
# The return value is the path to the DDI codebook file, which can then be passed to read_ipums_micro to read the data
path_to_ddi_file <- download_extract(submitted_extract, download_dir = "data")
```

```{r}
data <- read_ipums_micro("data/usa_00006.xml")
data <- data |>
  mutate(across(where(is.labelled), ~as_factor(lbl_clean(.x))))
```


```{r}
states <- c("Michigan")
vars <- c("STATEFIP", "PERNUM", "FTOTINC", "INCTOT")

```

```{r}
data_mi <- data %>%
  filter(PERNUM == 1,
         !GQ %in% c("Group quarters--Institutions", "Other group quarters")) %>%
  select(PERNUM, FTOTINC, INCTOT)
  
  #select(all_of(vars)) %>%
  #filter(STATEFIP %in% states,
  #       PERNUM == 1) 

data_mi$FTOTINC <- as.numeric(as.character(recode(data_mi$FTOTINC,
                                     "No income (1950-2000, ACS/PRCS) " = "0")))

data_mi$INCTOT <- as.numeric(as.character(recode(data_mi$INCTOT,
                                     "No income (1950-2000, ACS/PRCS) " = "0")))

# set character NAs to be NA
data_mi[data_mi == "N/A"]<-NA 

# complete case analysis of adults only
data_mi <- data_mi %>%
  filter(complete.cases(.)) %>%
  select(-"PERNUM")

set.seed(1)
data_mi <- data_mi[sample(nrow(data_mi), 40000), ]
```

Synthesize data from permuted and original confidential data
```{r}
# original synthesis
start_data = data_mi[,1]
conf_data = data_mi
# synthesize categorical first, then continuous
visit_sequence = visit_sequence(c("INCTOT"), start_data, type = "manual")
roadmap = roadmap(conf_data, start_data, visit_sequence)
recipe = construct_recipes(roadmap = roadmap)

tree_reg <- parsnip::decision_tree(cost_complexity = .0001) %>%
  set_mode(mode = "regression") %>%
  set_engine(engine = "rpart")

synth_spec = synth_spec(roadmap,
                        synth_algorithms = list(tree_reg),
                        recipe,
                        predict_methods = sample_rpart)

# noise
noise <- noise(roadmap = roadmap,
               add_noise = FALSE,
               exclusions = 0)

# constraints
constraints <- constraints(roadmap = roadmap,
                           constraints = NULL,
                           max_z = 0)

replicates <- replicates(replicates = 1,
                         workers = 1,
                         summary_function = NULL)

# create a presynth object
presynth1 <- presynth(
  roadmap = roadmap,
  synth_spec = synth_spec,
  noise = noise, 
  constraints = constraints,
  replicates = replicates
)
```

```{r}
set.seed(1)
synthesized = synthesize(presynth1, progress = TRUE)
```

```{r}
# permuted synthesis
set.seed(1)
perm_data = data_mi
perm_data$FTOTINC = permute(data_mi$FTOTINC)
```

```{r}
# original synthesis
start_data = perm_data[,1]
conf_data = perm_data
# synthesize categorical first, then continuous
visit_sequence = visit_sequence(c("INCTOT"), start_data, type = "manual")
roadmap = roadmap(conf_data, start_data, visit_sequence)
recipe = construct_recipes(roadmap = roadmap)

tree_reg <- parsnip::decision_tree(cost_complexity = .0001) %>%
  set_mode(mode = "regression") %>%
  set_engine(engine = "rpart")

synth_spec = synth_spec(roadmap,
                        synth_algorithms = list(tree_reg),
                        recipe,
                        predict_methods = sample_rpart)

# noise
noise <- noise(roadmap = roadmap,
               add_noise = FALSE,
               exclusions = 0)

# constraints
constraints <- constraints(roadmap = roadmap,
                           constraints = NULL,
                           max_z = 0)

replicates <- replicates(replicates = 1,
                         workers = 1,
                         summary_function = NULL)

# create a presynth object
presynth1 <- presynth(
  roadmap = roadmap,
  synth_spec = synth_spec,
  noise = noise, 
  constraints = constraints,
  replicates = replicates
)
```

```{r}
set.seed(1)
synthesized_perm = synthesize(presynth1, progress = TRUE)
```

```{r}
disc_tree <- function(synth, conf){
  # Evaluate discriminant-based metrics on the data using tree-based model
  tree_mod <- decision_tree(cost_complexity = tune()) %>%
    set_mode(mode = "classification") %>%
    set_engine(engine = "rpart")
  
  rpart_rec <- recipe(.source_label ~ ., data = discrimination(synth, conf)$combined_data)
  
  grid = grid_regular(cost_complexity(), levels= 10)
  
  # set up discriminator
  d <- discrimination(synth, conf) %>%
    add_propensities_tuned(
      grid = grid, 
      recipe = rpart_rec,
      spec = tree_mod
    ) %>%
    add_discriminator_auc() %>%
    add_specks() %>%
    add_pmse()
  res = c(d$discriminator_auc, d$pmse, d$specks)
  return(c(res$.estimate[2], res$.pmse[2], res$.specks[2]))
}

disc_rf <- function(synth, conf){
  # Evaluate discriminant-based metrics on the data using random forest
  rand_forest_mod <- rand_forest(
    mode = "classification",
    engine = "randomForest",
    mtry = NULL,
    trees = NULL,
    min_n = NULL
  )
  
  rpart_rec <- recipe(.source_label ~ ., data = discrimination(synth, conf)$combined_data)
  
  # set up discriminator
  d_rf <- discrimination(synth, conf) %>%
    add_propensities(
      recipe = rpart_rec,
      spec = rand_forest_mod
    ) %>%
    add_discriminator_auc() %>%
    add_specks() %>%
    add_pmse()
  res = c(d_rf$discriminator_auc, d_rf$pmse, d_rf$specks)
  return(c(res$.estimate[2], res$.pmse[2], res$.specks[2]))
}
```


```{r}
# data synthesized from confidential data
d1 = disc_tree(synthesized, data_mi)
d2 = disc_rf(synthesized, data_mi)

# data synthesized from permuted confidential data
d4 = disc_tree(synthesized_perm, data_mi)
d5 = disc_rf(synthesized_perm, data_mi)

c(d1, d2, d4, d5)
```